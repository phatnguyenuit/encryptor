{"version":3,"sources":["pages/Decrypt/index.tsx","lib/encryption.ts","hooks/useEncryptionForm.ts"],"names":["DecryptPageComponent","useState","decryptedText","setDecryptedText","useEncryptionForm","algorithm","password","text","handleChangeAlgorithm","handleChangePassword","handleChangeText","handleDecrypt","useCallback","e","a","preventDefault","encryption","Encryption","decrypt","Buffer","from","decryptedValue","toString","action","noValidate","onSubmit","className","htmlFor","required","id","value","onChange","ALGORITHMS","map","_algorithm","key","type","rows","readOnly","to","DecryptPage","memo","displayName","cipher","decipher","alloc","iv","password_buffer","concat","length","this","crypto","createCipheriv","createDecipheriv","data","Promise","resolve","reject","update","final","exception","getCiphers","setAlgorithm","setPassword","setText","target"],"mappings":"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","file":"static/js/4.7a7eff87.chunk.js","sourcesContent":["import React, { memo, useState, useCallback, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Encryption from 'lib/encryption';\nimport useEncryptionForm, { ALGORITHMS } from 'hooks/useEncryptionForm';\n\nexport const DecryptPageComponent: React.FC = () => {\n\tconst [decryptedText, setDecryptedText] = useState('');\n\tconst {\n\t\talgorithm, \n\t\tpassword, \n\t\ttext, \n\t\thandleChangeAlgorithm, \n\t\thandleChangePassword, \n\t\thandleChangeText\n\t} = useEncryptionForm();\n\n\tconst handleDecrypt = useCallback(\n\t\tasync (e: FormEvent<HTMLFormElement>) => {\n\t\t\te.preventDefault();\n\n\t\t\tconst encryption = new Encryption(algorithm, password);\n\t\t\tconst decryptedValue = await encryption.decrypt(Buffer.from(text, 'hex'));\n\t\t\tsetDecryptedText(decryptedValue.toString());\n\t\t},\n\t\t[algorithm, password, text],\n\t);\n\treturn (\n\t\t<div>\n\t\t\t<h1>Decrypt</h1>\n\t\t\t<form action=\"#\" noValidate onSubmit={handleDecrypt}>\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t<label htmlFor=\"algorithm\">Algorithm</label>\n\t\t\t\t\t<select required id=\"algorithm\" value={algorithm} onChange={handleChangeAlgorithm}>\n\t\t\t\t\t\t{ALGORITHMS.map((_algorithm) => (\n\t\t\t\t\t\t\t<option key={_algorithm} value={_algorithm}>\n\t\t\t\t\t\t\t\t{_algorithm}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t<input id=\"password\" \n\t\t\t\t\t\tvalue={password} \n\t\t\t\t\t\tonChange={handleChangePassword} \n\t\t\t\t\t\ttype=\"password\" \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t<label htmlFor=\"text\">Text to decrypt</label>\n\t\t\t\t\t<textarea id=\"text\" value={text} onChange={handleChangeText} rows={3}></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t<label htmlFor=\"decryptedText\">Decrypted</label>\n\t\t\t\t\t<textarea readOnly id=\"decryptedText\" value={decryptedText} rows={3}></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-buttons\">\n\t\t\t\t\t<button type=\"submit\">Decrypt</button>\n\t\t\t\t\t<Link to=\"/encrypt\">Encrypt</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nconst DecryptPage = memo(DecryptPageComponent);\nDecryptPage.displayName = 'DecryptPage';\n\nexport default DecryptPage;\n","import crypto from \"crypto\";\n\nclass Encryption {\n  private cipher: crypto.Cipher;\n  private decipher: crypto.Decipher;\n  /**\n   *\n   * @param {*} algorithm crypto.getCiphers()\n   * @param {*} password password\n   */\n  constructor(algorithm: string, password: string) {\n    let key = Buffer.alloc(32); // key should be 32 bytes\n    let iv = Buffer.alloc(16); // iv should be 16\n\n    const password_buffer = Buffer.from(password);\n\n    key = Buffer.concat([password_buffer], key.length);\n    iv = Buffer.concat([password_buffer], iv.length);\n\n    this.cipher = crypto.createCipheriv(algorithm, key, iv);\n    this.decipher = crypto.createDecipheriv(algorithm, key, iv);\n  }\n  encrypt(data: string): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      try {\n        const encrypted = Buffer.concat([\n          this.cipher.update(data, \"utf8\"),\n          this.cipher.final(),\n        ]);\n        resolve(encrypted);\n      } catch (exception) {\n        reject(exception);\n      }\n    });\n  }\n\n  decrypt(data: NodeJS.ArrayBufferView): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      try {\n        const decrypted = Buffer.concat([\n          this.decipher.update(data),\n          this.decipher.final(),\n        ]);\n        resolve(decrypted);\n      } catch (exception) {\n        reject(exception);\n      }\n    });\n  }\n}\n\nexport default Encryption;\n","import { useState, useCallback, ChangeEvent } from 'react';\n\nimport crypto from 'crypto';\n\nexport const ALGORITHMS = crypto.getCiphers();\nconst defaultAlgorithm = 'aes-256-cbc';\n\nconst useEncryptionForm = () => {\n  const [algorithm, setAlgorithm] = useState(defaultAlgorithm);\n\tconst [password, setPassword] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst handleChangeAlgorithm = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n\t\tsetAlgorithm(e.target.value);\n\t}, []);\n\n\tconst handleChangePassword = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetPassword(e.target.value);\n\t}, []);\n\n\tconst handleChangeText = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetText(e.target.value);\n\t}, []);\n  return {\n    algorithm,\n    password,\n    text,\n    handleChangeAlgorithm,\n    handleChangePassword,\n    handleChangeText,\n  }\n}\n\nexport default useEncryptionForm;\n"],"sourceRoot":""}